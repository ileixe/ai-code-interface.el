* ai-code-interface

AI Code Interface - A powerful Emacs package for generating and managing AI programming prompts.

** Overview

ai-code-interface is an Emacs package designed for AI programming assistants, providing intelligent prompt generation, management, and sending capabilities. It supports various AI programming tools (like Claude Code) and offers rich code context-aware features.

** Key Features

*** Intelligent Prompt Generation
- Automatically generates prompts based on the current function, file, and other contextual information.
- Supports various scenarios such as code changes, asking questions, and implementing TODOs.
- Provides preset snippet templates for common programming tasks.

*** Code Understanding and Discussion
- Comprehensive Code Explanation: Get clear explanations for entire files, functions, selected regions, specific lines, or symbols at point.
- Interactive Prompt Editing: All generated prompts can be reviewed and edited by the user before being sent to the AI, ensuring full control over the query.
- Context-aware Question Answering: Ask questions about your code (file, function, or selected region) and get answers in context.

*** Prompt Management
- Repository-specific prompt file management (.ai.code.prompt.org).
- Org-mode based prompt editing interface.
- Supports history and auto-completion.

*** Agile Development Support
- Test-Driven Development (TDD) cycle support.
- Code refactoring guidance and suggestions.
- Supports various refactoring techniques (extract method, rename variable, etc.).

*** Git Integration
- Code review and diff analysis.
- Git history analysis and blame functionality.
- Branch comparison and commit analysis.

*** Multiple Input Methods
- Supports Helm auto-completion (optional).
- History management and reuse.
- Context-aware intelligent suggestions.

** Installation

*** Using straight.el (Recommended)

#+begin_src emacs-lisp
(use-package ai-code-interface
  :straight (:host github :repo "tninja/ai-code-interface.el")
  :config
  ;; Enable global keybinding
  (global-set-key (kbd "C-c p") #'ai-code-menu)
  
  ;; Optional: Enable Helm support (requires helm to be installed first)
  ;; (when (featurep 'helm)
  ;;   (require 'ai-code-input))
  
  ;; Optional: Set to automatically send to AI
  (setq ai-code-auto-send-to-ai t)
  
  ;; Optional: Set up Magit integration
  (with-eval-after-load 'magit
    (ai-code-magit-setup-transients)))
#+end_src

*** Manual Installation

1. Clone the repository locally:
   #+begin_src shell
   git clone https://github.com/tninja/ai-code-interface.el.git ~/.emacs.d/lisp/ai-code-interface.el
   #+end_src

2. Add the following to your Emacs configuration:
   #+begin_src emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/lisp/ai-code-interface.el")
   (require 'ai-code-interface)
   (global-set-key (kbd "C-c p") #'ai-code-menu)
   #+end_src

** Usage

*** Basic Usage

1. In any Git repository, press ~C-c p~ to open the AI code menu.
2. Select the desired function:
   - ~a~: Start an AI CLI session.
   - ~c~: Code change (supports C-u prefix for global changes).
   - ~i~: Implement a TODO comment.
   - ~q~: Ask a question about the code.
   - ~p~: Open the prompt file.
   - ~<SPC>~: Send a command to the AI.

*** Code Change Function

- After selecting a code region, use ~C-c p c~ to generate a change prompt based on the selection.
- Using it inside a function will automatically include the function's context.
- Use ~C-u C-c p c~ for a context-free global change.

*** TODO Implementation

- With the cursor on a TODO comment, use ~C-c p i~ to automatically generate an implementation prompt.
- Supports implementing TODOs for a selected region or the entire function.
- Automatically maintains the existing code structure.

*** Agile Development Features

- ~C-c p r~: Refactor code, offering a choice of various refactoring techniques.
- ~C-c p t~: TDD cycle support (Red-Green-Refactor).
- ~C-c p v~: Code review and diff analysis.

*** Prompt File Management

- ~C-c p p~: Open the repository-specific prompt file.
- ~C-c p b~: Send the current paragraph to the AI.
- The prompt file supports Org-mode format and YASnippet snippets.

*** Git Integration Features

Available in Magit:
- ~d a~: Generate or review a diff file.
- ~B a~: Analyze Git blame information.
- ~l a~: Analyze Git log.

** Configuration Options

*** Custom Variables

- ~ai-code-auto-send-to-ai~: Whether to automatically send prompts to the AI (default t).
- ~ai-code-use-gptel-headline~: Whether to use GPTel to generate headlines (default nil).
- ~ai-code-prompt-suffix~: Suffix text for prompts (default nil).
- ~ai-code-prompt-file-name~: Name of the prompt file (default ".ai.code.prompt.org").

*** Example Configuration

#+begin_src emacs-lisp
(setq ai-code-auto-send-to-ai t
      ai-code-use-gptel-headline nil
      ai-code-prompt-suffix "Please answer in English.")
#+end_src

** Dependencies

*** Required Dependencies
- Emacs 26.1 or later
- ~org~: Org-mode support
- ~magit~: Git integration
- ~transient~: Menu system

*** Optional Dependencies
- ~helm~: Enhanced auto-completion functionality
- ~yasnippet~: Snippet support
- ~gptel~: Intelligent headline generation
- ~claude-code.el~: Claude Code integration

** Snippets

Includes a rich set of preset snippets covering:
- Code generation and refactoring
- Testing and debugging
- Documentation writing
- Architecture design
- Performance optimization
- Security review

** Extension and Customization

You can extend the functionality in the following ways:
1. Add custom snippets to the ~snippets/ai-prompt-mode/~ directory.
2. Customize AI command aliases.
3. Integrate other AI programming tools.

** Troubleshooting

- Ensure you are in a Git repository.
- Check that Magit and related dependencies are installed correctly.
- Verify that the AI tool (e.g., Claude Code) is configured correctly.

** License

Apache-2.0 License

** Contributing

Contributions, issue reports, and improvement suggestions are welcome!